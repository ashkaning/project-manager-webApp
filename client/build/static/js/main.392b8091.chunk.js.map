{"version":3,"sources":["utils/API.js","components/Form/index.js","components/Grid/index.js","pages/Home.js","components/TopNav/index.js","pages/Role.js","pages/Service.js","pages/User.js","pages/Clients.js","pages/NoMatch.js","App.js","index.js"],"names":["API","NewRol","role","axios","post","getAllRoles","get","deleteRole","delete","getOneRole","updateOneRole","put","loginSession","usersLogin","authtData","saveNewUser","user","getAllUsers","getOneUser","getAllServices","saveNewService","service","deleteService","getOneServiceInfo","updateOneService","getAllCustomers","assignAllServiceToClient","getAllDeparments","getAllServiceCustomers","serviceClient","customerId","updateStatus","data","updateEmployee","Input","props","react_default","a","createElement","className","Object","assign","FormBtn","style","float","marginBottom","children","Container","_ref","fluid","concat","Row","_ref2","Col","_ref3","size","split","map","join","ColDark","_ref4","Home","state","email","password","alertText","handleInputChange","event","_event$target","target","name","value","_this","setState","defineProperty","handleFormSubmit","preventDefault","then","result","isUserLoggin","toast","info","history","push","some","error","catch","err","console","log","res","isSuccess","this","color","onChange","placeholder","type","onClick","Component","TopNav","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","Role","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","roleName","updateRoleName","updateRoleDesc","resAllRoles","allRoles","description","roleDesc","success","resetFeilds","resDelete","resGetOneRole","document","getElementById","display","resOneUpdate","handleTextChange","closeButton","bind","assertThisInitialized","_this2","Table","striped","bordered","hover","length","singleRole","key","Button","variant","Modal","Dialog","Header","Title","Body","Footer","Services","serviceName","serviceDescription","subId","updateServiceName","UpdateSubId","updateserviceDescription","DeparmentId","allServices","oneService","resOneServ","resParent","allCustomers","allDeparments","servicesToCustomer","resAllServices","resAllServoces","serviceMenu","window","location","reload","evt","deleleServiceId","resDel","serviceId","resGetOne","resCustomer","resDeparments","singleMenu","subMenuMain","subIdSearch","filter","obj","singleParentsubMenu","savedResult","x","esm_Col","Form","Label","Control","as","singleService","rows","siz","Group","singleCustomer","fName","lName","singleDeparment","Users","address","addressUnit","addressCity","addressState","addressZip","phone","companyName","logo","allUsers","roleId","userId","resSucceed","resetAll","resAllUsers","resUserId","updateOne","controlId","pattern","defaultValue","singleUser","dist_default","format","date","createdAt","updatedAt","deleteUser","Clients","allServicesClient","subSingleMenu","status","label","getOneEmployee","getAllEmployees","resGetAllDeparments","getEmployee","selectedId","singleSelctedEmployee","updateAsseignedEmoloyee","getAllEmployeesoptions","singleEmployee","updateAsseignedEmoloyeeAPI","employeeId","updatedResult","clientId","resServiceClient","updateIdStatus","_event$target2","updateRealStatus","evet","content","selectFunction","Service","ServiceId","_event$target3","User","NoMatch","App","BrowserRouter","components_TopNav","react_toastify","Switch","Route","exact","path","component","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.392b8091.chunk.js","sourcesContent":["import axios from \"axios\";\r\nexport default {\r\n    /* Roles/Deparments API */\r\n    NewRol: function (role) {\r\n        return axios.post(\"/api/role\", role);\r\n    },\r\n    getAllRoles: function () {\r\n        return axios.get(\"/api/role\");\r\n    },\r\n    deleteRole: function (role) {\r\n        return axios.delete(\"/api/role/\", role);\r\n    },\r\n    getOneRole: function (role) {\r\n        return axios.post(\"/api/getOneRole\", role);\r\n    },\r\n    updateOneRole: function (role) {\r\n        return axios.put(\"/api/role\", role);\r\n    },\r\n    /* Users API */\r\n    loginSession: function () {\r\n        return axios.get(\"/api/login\")\r\n    },\r\n    usersLogin: function (authtData) {\r\n        return axios.post(\"/api/login\", authtData)\r\n    },\r\n    saveNewUser: function (user) {\r\n        return axios.post(\"/api/user\", user);\r\n    },\r\n    getAllUsers: function () {\r\n        return axios.get(\"/api/user\");\r\n    },\r\n    getOneUser: function (user) {\r\n        return axios.post(\"/api/getOneUser\", user)\r\n    },\r\n    /* Services API */\r\n    getAllServices: function () {\r\n        return axios.get(\"/api/service\");\r\n    },\r\n    saveNewService: function (service) {\r\n        return axios.post(\"/api/service\", service);\r\n    },\r\n    deleteService: function (service) {\r\n        return axios.delete(\"/api/service\", service);\r\n    },\r\n    getOneServiceInfo: function (service) {\r\n        return axios.post(\"/api/getOneService\", service);\r\n    },\r\n    updateOneService: function (service) {\r\n        return axios.put(\"/api/service\", service);\r\n    },\r\n    getAllCustomers: function () {\r\n        return axios.get(\"/api/assignServicesAndAllCustomers\");\r\n    },\r\n    assignAllServiceToClient: function (service) {\r\n        return axios.post(\"/api/assignServicesAndAllCustomers\", service);\r\n    },\r\n    getAllDeparments: function () {\r\n        return axios.get(\"/api/getAllDeparments\")\r\n    },\r\n    /* Services Customers */\r\n    getAllServiceCustomers: function () {\r\n        return axios.get(\"/api/serviceCustomer\")\r\n    },\r\n    serviceClient: function (customerId) {\r\n        return axios.post(\"api/serviceCustomer\", customerId)\r\n    },\r\n    updateStatus: function (data) {\r\n        return axios.put(\"/api/serviceCustomer\", data);\r\n    },\r\n    updateEmployee: function (data) {\r\n        return axios.put(\"/api/serviceCustomerAssignedEmployeeUpdate\", data)\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\n// This file exports the Input, TextArea, and FormBtn components\r\n\r\nexport function Input(props) {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <input className=\"form-control\" {...props} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function SelectBox({ props, children }){\r\n  return (\r\n    <div className=\"form-group\">\r\n      <select className=\"postCategory\" {...props}>\r\n        {children}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\nexport function TextArea({ props }){\r\n  return (\r\n    <div className=\"form-group\">\r\n       <textarea className=\"form-control\" {...props}> </textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function FormBtn(props) {\r\n  return (\r\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\r\n      {props.children}\r\n    </button>\r\n  );\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\nexport function ColDark({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"colDarkBg col-\" + size)\r\n        .join(\" \") \r\n      }\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\nexport function ColLight({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"colLightBorder col-\" + size)\r\n        .join(\" \") \r\n      }\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport { toast } from \"react-toastify\"\r\nimport { Input, FormBtn } from \"../components/Form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Col, Row, Container, ColDark } from \"../components/Grid\";\r\nimport \"./style.css\"\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        email: \"\",\r\n        password: \"\",\r\n        alertText: \"\"\r\n    };\r\n    componentDidMount() {\r\n        this.loginSession();\r\n    }\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        API.usersLogin({\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        })\r\n            .then((result) => {\r\n                if (!(result.data.isUserLoggin)) {\r\n                    toast.error(\"username or password is wrong\");\r\n\r\n                } else {\r\n                    toast.info(\"redirecting to your profile\");\r\n                    this.props.history.push('/users', { some: 'state' })\r\n\r\n                }\r\n\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n    loginSession = () => {\r\n        API.loginSession()\r\n            .then((res) => {\r\n                console.log(res.data)\r\n                if (res.data.isSuccess === \"Yes\") {\r\n                    toast.info(\"You are logged in... !\");\r\n                    this.props.history.push('/users', { some: 'state' })\r\n                }\r\n                else if (res.data.isSuccess === \"No\") {\r\n                    toast.info(\"Please Try To Login... !\");\r\n                }\r\n                else{}\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col size=\"md-12 sm-12\">\r\n                        <Col size=\"md-12\">\r\n                            <h1 className=\"text-center\">Login</h1>\r\n                            <h3 style={{ color: 'red' }}></h3>\r\n                        </Col>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col size=\"md-4\"></Col>\r\n                    <ColDark size=\"md-4\">\r\n                        <form>\r\n                            <label>Email:</label>\r\n                            <Input\r\n                                onChange={this.handleInputChange}\r\n                                name=\"email\"\r\n                                placeholder=\"johnwick@site.com (required)\"\r\n                            />\r\n                            <label>Password:</label>\r\n                            <Input\r\n                                onChange={this.handleInputChange}\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                placeholder=\"***** (required)\"\r\n                            />\r\n                            <hr />\r\n                            <FormBtn\r\n                                onClick={this.handleFormSubmit}\r\n                            >\r\n                                Login\r\n              </FormBtn>\r\n                        </form>\r\n                    </ColDark>\r\n                    <Col size=\"md-4\"></Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col size=\"md-12\">\r\n                        <div className=\"spacer\"></div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\nexport default Home;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction TopNav(){\r\n    return(\r\n        <nav className=\"navbar navbar-expand-lg sticky-top navbar-light bg-light bg-navBar\">\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse justify-content-center\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\" id=\"category-nav\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/roles\">Departments/Roles</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/services\">Services</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/clients\">Clients</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/users\">Users</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\nexport default TopNav;","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport { toast } from \"react-toastify\"\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Input, FormBtn } from \"../components/Form\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport \"./style.css\";\r\nimport { Table, Button, Modal } from 'react-bootstrap';\r\n\r\nclass Role extends Component {\r\n    state = {\r\n        roleName: \"\",\r\n        updateRoleName: \"\",\r\n        updateRoleDesc: \"\"\r\n    };\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roleDesc: \"\",\r\n            allRoles: [],\r\n            getOneRole: []\r\n        };\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllRoles();\r\n    }\r\n\r\n    /////////////////////Get all info from Roles db////////////////////\r\n    getAllRoles = () => {\r\n        API.getAllRoles()\r\n            .then(resAllRoles => {\r\n                this.setState({ allRoles: resAllRoles.data })\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator\"))\r\n    }\r\n    ////////////////////Insert Function for Making Roles//////////////////\r\n    handleFormSubmit = event => {\r\n        event.preventDefault()\r\n        API.NewRol({\r\n            name: this.state.roleName,\r\n            description: this.state.roleDesc\r\n        })\r\n            .then((result) => {\r\n                toast.success(\"New role added!\")\r\n                this.getAllRoles();\r\n                this.resetFeilds();\r\n            })\r\n            .catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\r\n    }\r\n    ////////////////////DELETE FUNCTION///////////////////////\r\n    deleteRole = (id) => {\r\n        var data = { id: id }\r\n        API.deleteRole({ data })\r\n            .then(resDelete => {\r\n                toast.success(\"Role Deleted!\")\r\n                this.getAllRoles();\r\n            })\r\n            .catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\r\n    }\r\n    ///////////////////GET INFORAMTION ON UPDATE CLICK AND UPDATE FUNCTION////////////\r\n    getOneRole = (id) => {\r\n        API.getOneRole({ id: id })\r\n            .then(resGetOneRole => {\r\n                toast.success(\"Please updae the information below\")\r\n                this.setState({\r\n                    getOneRole: resGetOneRole.data\r\n                })\r\n                document.getElementById(\"popupUpdate\").style.display = 'block';\r\n            }).catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\r\n    }\r\n    updateOneRole = (id) => {\r\n        API.updateOneRole({\r\n            id: id,\r\n            name: this.state.updateRoleName,\r\n            description: this.state.updateRoleDesc\r\n        })\r\n            .then(resOneUpdate => {\r\n                toast.success(\"The role updated\")\r\n                this.getAllRoles();\r\n                this.resetFeilds();\r\n            }).catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\r\n    }\r\n    /////////////////GET INFORMATION FROM INPUTS//////////////////////////\r\n    handleTextChange = event => {\r\n        this.setState({\r\n            roleDesc: event.target.value\r\n        });\r\n    };\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n    resetFeilds = () => {\r\n        this.setState({\r\n            roleDesc: '',\r\n            roleName: '',\r\n            updateRoleName: '',\r\n            updateRoleDesc: ''\r\n        })\r\n    }\r\n    closeButton = () => {\r\n        document.getElementById(\"popupUpdate\").style.display = 'none';\r\n        toast.error(\"Update box closed\")\r\n    }\r\n    //////////////////////////////////////////\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col size=\"md-12\">\r\n                        <h2 className=\"text-center\">\r\n                            Department List\r\n                        </h2>\r\n                    </Col>\r\n                    <Col size=\"md-12\">\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <td>ID</td>\r\n                                    <td>Role Name</td>\r\n                                    <td>Role Description</td>\r\n                                    <td>Edit</td>\r\n                                    <td>Delele</td>\r\n                                </tr>\r\n                            </thead>\r\n                            {this.state.allRoles.length ? (\r\n                                <tbody>\r\n                                    {this.state.allRoles.map(singleRole => (\r\n\r\n                                        <tr key={singleRole.id}>\r\n\r\n                                            <td name=\"roleId\">{singleRole.id}</td>\r\n                                            <td>{singleRole.name}</td>\r\n                                            <td>{singleRole.description}</td>\r\n                                            <td className=\"text-center\"><Button onClick={() => this.getOneRole(singleRole.id)} variant=\"primary\">Edit</Button></td>\r\n                                            <td className=\"text-center\"><Button onClick={() => this.deleteRole(singleRole.id)} variant=\"danger\">Delete</Button>\r\n                                            </td>\r\n\r\n                                        </tr>\r\n\r\n                                    ))}\r\n                                </tbody>\r\n                            ) : (<h3>Loading...</h3>)}\r\n\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n                <hr />\r\n                <Row>\r\n                    <Col size=\"md-6\">\r\n                        <Modal.Dialog id=\"popupUpdate\">\r\n                            <Modal.Header closeButton onClick={() => this.closeButton()}>\r\n                                <Modal.Title>Update Role</Modal.Title>\r\n                            </Modal.Header>\r\n\r\n                            <Modal.Body>\r\n                                <p>Please update the information below and save.</p>\r\n                            </Modal.Body>\r\n\r\n                            <Modal.Footer>\r\n                                <Row>\r\n                                    <Col size=\"md-6\">\r\n\r\n                                        <input onChange={this.handleInputChange} name=\"updateRoleName\" placeholder={this.state.getOneRole.name} />\r\n                                    </Col>\r\n                                    <Col size=\"md-6\">\r\n                                        <input onChange={this.handleInputChange} name=\"updateRoleDesc\" placeholder={this.state.getOneRole.description} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col size=\"md-12\">\r\n                                        <Button onClick={() => this.updateOneRole(this.state.getOneRole.id)} variant=\"primary\">Save changes</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Modal.Footer>\r\n                        </Modal.Dialog>\r\n                    </Col>\r\n                    <Col size=\"md-6\">\r\n                        <form>\r\n                            <div className=\"form-group\">\r\n                                <input className=\"form-control\" name=\"roleName\" onChange={this.handleInputChange} value={this.state.roleName} placeholder=\"Marketing or Development (required)\" />\r\n                                <textarea name=\"roleDesc\" className=\"form-control\" onChange={this.handleTextChange} ></textarea>\r\n                            </div>\r\n                            <FormBtn\r\n                                onClick={this.handleFormSubmit}\r\n                            >\r\n                                Post\r\n                        </FormBtn>\r\n                        </form>\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n            </Container>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Role;","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport { toast } from \"react-toastify\"\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Row, Container } from \"../components/Grid\";\r\nimport \"./style.css\";\r\nimport { Modal, Button, Form, Col } from 'react-bootstrap';\r\n\r\nclass Services extends Component {\r\n\r\n    state = {\r\n        serviceName: '',\r\n        serviceDescription: '',\r\n        subId: '',\r\n        updateServiceName: '',\r\n        UpdateSubId: '',\r\n        updateserviceDescription: '',\r\n        customerId: '',\r\n        DeparmentId: '',\r\n        allServices: [],\r\n        oneService: [],\r\n        resOneServ: [],\r\n        resParent: [],\r\n        allCustomers: [],\r\n        allDeparments: [],\r\n        servicesToCustomer: []\r\n    }\r\n    componentDidMount() {\r\n        this.getAllServices();\r\n        this.getAllCustomers();\r\n        this.getAllDeparments();\r\n    }\r\n    //////////////////////////\r\n    getAllServices = () => {\r\n        API.getAllServices()\r\n            .then(resAllServices => {\r\n                this.setState({ allServices: resAllServices.data })\r\n                console.log(this.state.allServices)\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator. (Get ALL Service)\"))\r\n    }\r\n    /////////SAVE NNEW SERVICE API FUNCTION////////////////////\r\n    saveNewService = (event) => {\r\n        event.preventDefault()\r\n        API.saveNewService({\r\n            serviceName: this.state.serviceName,\r\n            serviceDescription: this.state.serviceDescription,\r\n            subId: this.state.subId\r\n        }).then(resAllServoces => {\r\n            this.serviceMenu();\r\n            toast.success(\"Menu added!\");\r\n            window.location.reload(false);\r\n\r\n        }).catch(err => toast.error(\"There is an error. Please contact administrator (on Saving)\"))\r\n    }\r\n    //////////////////DELETE Menu////////\r\n    deleteService = (evt) => {\r\n        API.deleteService({ data: { deleleServiceId: evt } })\r\n            .then(resDel => {\r\n                toast.success(\"The Item deleted successfully!\")\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (on Deleteing)\"))\r\n    }\r\n    ///////////////EDIT SERVICE///////////////////\r\n    getOneServiceInfo = (serviceId) => {\r\n        this.closeButton();\r\n        API.getOneServiceInfo({ id: serviceId })\r\n            .then(resGetOne => {\r\n                this.setState({\r\n                    resOneServ: resGetOne.data.resOneServ\r\n                })\r\n                if (!resGetOne.data.resParent) {\r\n\r\n                    this.setState({ resParent: { serviceName: 'Parent', id: '0' } });\r\n                }\r\n                else {\r\n                    this.setState({ resParent: resGetOne.data.resParent });\r\n                }\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (on Get One Info for Editing)\"))\r\n    }\r\n    ////////////////Get all client lists////////////\r\n    getAllCustomers = () => {\r\n        API.getAllCustomers()\r\n            .then(resCustomer => {\r\n                this.setState({ allCustomers: resCustomer.data })\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Getting All Customers)\"))\r\n    }\r\n    getAllDeparments = () => {\r\n        API.getAllDeparments()\r\n            .then(resDeparments => {\r\n                this.setState({ allDeparments: resDeparments.data })\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Getting All Departmnets)\"))\r\n    }\r\n    ////////////GETTING INPUT VALUE/////////////////////\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n    /////////////MENU SERVICE SIDEBAR//////////\r\n    serviceMenu = () => {\r\n        return (\r\n            <ol>\r\n                {this.state.allServices.map((singleMenu) => {\r\n                    if (singleMenu.subId === 0) {\r\n                        return (<li key={singleMenu.id}>{singleMenu.serviceName}\r\n                            <a className=\"customEditButton\" href=\"#\" onClick={() => this.getOneServiceInfo(singleMenu.id)} >Edit</a>\r\n                            <a className=\"customDeleteButton\" href=\"#\" onClick={() => this.deleteService(singleMenu.id)} >Delete</a>\r\n                            {this.subMenuMain(singleMenu.id)}</li>)\r\n                    }\r\n\r\n                })}\r\n            </ol>\r\n        )\r\n    }\r\n\r\n    subMenuMain = (subIdSearch) => {\r\n        let ParentsubMenu = (this.state.allServices.filter(obj => obj.subId === subIdSearch))\r\n\r\n        return (\r\n            ParentsubMenu.map(singleParentsubMenu => (\r\n                <ul> <li key={singleParentsubMenu.id}>{singleParentsubMenu.serviceName}\r\n                    <a className=\"customEditButton\" href=\"#\" onClick={() => this.getOneServiceInfo(singleParentsubMenu.id)} >Edit</a>\r\n                    <a className=\"customDeleteButton\" href=\"#\" onClick={() => this.deleteService(singleParentsubMenu.id)}>Delete</a>\r\n                    {this.subMenuMain(singleParentsubMenu.id)}</li></ul>\r\n            ))\r\n\r\n        )\r\n    }\r\n    /*  childSubMenu = (subIdSearch) => {\r\n         let childSubMenuArray = (this.state.allServices.filter(obj => obj.subId === subIdSearch))\r\n         return (\r\n             childSubMenuArray.map(singlechildSubMenuArray => (\r\n                 <ul>\r\n                     <li>{singlechildSubMenuArray.serviceName}<a className=\"customDeleteButton\" href=\"#\" onClick={() => this.deleteService(singlechildSubMenuArray.id)} variant=\"danger\">Delete</a>\r\n                         {this.childSubMenu(singlechildSubMenuArray.id)} </li>\r\n                 </ul>\r\n             ))\r\n         )\r\n     } */\r\n    //////////////////////Update selected service information\r\n    updateOneService = (serviceId) => {\r\n        API.updateOneService({\r\n            id: serviceId,\r\n            serviceName: this.state.updateServiceName,\r\n            subId: this.state.UpdateSubId,\r\n            serviceDescription: this.state.updateserviceDescription\r\n        })\r\n            .then(result => {\r\n                toast.success(\"service updated\");\r\n                this.closeButton();\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (update service)\"))\r\n    }\r\n    ////////////////Create all services assign to a customer\r\n    assignAllServiceToClient = () => {\r\n        /*  let data = {\r\n             customerId: this.state.customerId,\r\n             allServices: this.state.allServices\r\n         } */\r\n        API.assignAllServiceToClient({\r\n            customerId: this.state.customerId,\r\n            allServices: this.state.allServices,\r\n            DeparmentId: this.state.DeparmentId\r\n        })\r\n            .then(savedResult => {\r\n                toast.success(\"All services assing to the client successfully\")\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Assign services to the customer)\"))\r\n    }\r\n    /////////////////////CLOSE EDIT FORM BOX\r\n    closeButton = () => {\r\n        var x = document.getElementById(\"popupUpdate\");\r\n        if (x.style.display === \"none\") {\r\n            x.style.display = \"block\";\r\n\r\n        } else {\r\n            x.style.display = \"none\";\r\n        }\r\n\r\n    }\r\n    //////////////////////////////////////\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"topSpacing\">\r\n                <Container>\r\n                    {/* ///////////update selected service //////////////*/}\r\n                    <Row>\r\n                        <Modal.Dialog className=\"editFormCustomClass\" id=\"popupUpdate\">\r\n                            <Modal.Header closeButton onClick={() => this.closeButton()}>\r\n                                <Modal.Title>Update selected service</Modal.Title>\r\n                            </Modal.Header>\r\n\r\n                            <Modal.Body>\r\n                                <p>Please update the information below and save.</p>\r\n                            </Modal.Body>\r\n\r\n                            <Modal.Footer>\r\n                                <Row>\r\n                                    <Col size=\"md-6\">\r\n                                        <Form.Label>Service Name</Form.Label>\r\n                                        <input onChange={this.handleInputChange} name=\"updateServiceName\" placeholder={this.state.resOneServ.serviceName} />\r\n                                    </Col>\r\n                                    <Col size=\"md-6\">\r\n                                        <Form.Label>Sub Service of</Form.Label>\r\n\r\n                                        {this.state.allServices.length ? (\r\n                                            <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"UpdateSubId\">\r\n                                                <option value={this.state.resParent.id}>{this.state.resParent.serviceName}</option>\r\n                                                <option>Choose...</option>\r\n                                                {this.state.allServices.map(singleService => (\r\n                                                    <option key={singleService.id} value={singleService.id}>{singleService.id} - {singleService.serviceName} - {singleService.subId}</option>\r\n                                                ))}\r\n                                            </Form.Control>\r\n\r\n                                        ) : (<h3>Loading Services...</h3>)}\r\n                                        <Form.Label>Service Description</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"updateserviceDescription\" placeholder={this.state.resOneServ.serviceDescription} as=\"textarea\" rows=\"1\" />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col size=\"md-12\">\r\n                                        <Button onClick={() => this.updateOneService(this.state.resOneServ.id)} variant=\"primary\">Save changes</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Modal.Footer>\r\n                        </Modal.Dialog>\r\n                    </Row>\r\n                    {/* ////////////////////////ADD SERVICE/////////// */}\r\n                    <Row>\r\n                        <Col siz=\"md-12\">\r\n                            <h2 className=\"text-center\">Add Services</h2>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* /////////////////add new service form */}\r\n                    <Row>\r\n                        <Col size=\"md-12\">\r\n                            <Form>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Service Name</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} type=\"text\" name=\"serviceName\" />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Sub Service of</Form.Label>\r\n\r\n                                        {this.state.allServices.length ? (\r\n                                            <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"subId\">\r\n                                                <option>Choose...</option>\r\n                                                {this.state.allServices.map(singleService => (\r\n                                                    <option key={singleService.id} value={singleService.id}>{singleService.id} - {singleService.serviceName} - {singleService.subId}</option>\r\n                                                ))}\r\n                                            </Form.Control>\r\n\r\n                                        ) : (<h3>Loading Services...</h3>)}\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Service Description</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"serviceDescription\" as=\"textarea\" rows=\"1\" />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Button onClick={this.saveNewService} variant=\"primary\" type=\"submit\">\r\n                                            Save\r\n                                        </Button>\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                    {/* ///////////////////show services */}\r\n                    <hr />\r\n                    <Row>\r\n                        <Col size=\"md-12\">\r\n                            <h2 className=\"text-center\">Here are the services</h2>\r\n                            {this.serviceMenu()}\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <hr />\r\n                    <Row>\r\n                        <Col size=\"md-12\">\r\n                            <h2 className=\"text-center\"> Set up services to a client</h2>\r\n                            <Form.Row>\r\n                                {this.state.allCustomers.length ? (\r\n                                    <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"customerId\">\r\n                                        <option>Choose the customer...</option>\r\n                                        {this.state.allCustomers.map(singleCustomer => (\r\n                                            <option key={singleCustomer.id} value={singleCustomer.id}>{singleCustomer.fName} - {singleCustomer.lName}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n                                ) : (<h3>Loading</h3>)}\r\n                                <br /><br />\r\n                                {this.state.allDeparments.length ? (\r\n                                    <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"DeparmentId\">\r\n                                        <option>Choose the deparment...</option>\r\n                                        {this.state.allDeparments.map(singleDeparment => (\r\n                                            <option key={singleDeparment.id} value={singleDeparment.id}>{singleDeparment.fName} - {singleDeparment.lName}</option>\r\n                                        ))}\r\n\r\n                                    </Form.Control>\r\n                                ) : (<h3>Loading</h3>)}\r\n                                <br /><br />\r\n                                <Button onClick={this.assignAllServiceToClient} variant=\"primary\" type=\"submit\">\r\n                                    Assign All the services to the selected client\r\n                            </Button>\r\n                            </Form.Row>\r\n\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Services;","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport { toast } from \"react-toastify\"\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Row, Container } from \"../components/Grid\";\r\nimport \"./style.css\";\r\nimport { Table, Button, Form, Col, Modal } from 'react-bootstrap';\r\nimport Moment from 'react-moment';\r\nclass Users extends Component {\r\n    state = {\r\n        fName: '',\r\n        lName: '',\r\n        address: '',\r\n        addressUnit: '',\r\n        addressCity: '',\r\n        addressState: '',\r\n        addressZip: '',\r\n        email: '',\r\n        phone: '',\r\n        companyName: '',\r\n        description: '',\r\n        logo: '',\r\n        password: '',\r\n        role: '',\r\n        allRoles: [],\r\n        allUsers: [],\r\n        getOneUser: []\r\n    }\r\n    /*     constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                allRoles: []\r\n            };\r\n        } */\r\n\r\n    saveNewUser = (event) => {\r\n        event.preventDefault()\r\n        API.saveNewUser({\r\n            fName: this.state.fName,\r\n            lName: this.state.lName,\r\n            address: this.state.address,\r\n            addressUnit: this.state.addressUnit,\r\n            addressCity: this.state.addressCity,\r\n            addressState: this.state.addressState,\r\n            addressZip: this.state.addressZip,\r\n            email: this.state.email,\r\n            phone: this.state.phone,\r\n            companyName: this.state.companyName,\r\n            description: this.state.description,\r\n            logo: '',\r\n            password: this.state.password,\r\n            roleId: this.state.role,\r\n            userId: ''\r\n        }).then(resSucceed => {\r\n            toast.success(\"User created successfully\")\r\n            this.resetAll()\r\n        }).catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\r\n    }\r\n    componentDidMount() {\r\n        this.getAllRoles();\r\n        this.getAllUsers();\r\n        this.resetAll()\r\n    }\r\n    //////////////GET ALL USERS INFO///////////////\r\n    getAllUsers = () => {\r\n        API.getAllUsers()\r\n            .then(resAllUsers => {\r\n                this.setState({ allUsers: resAllUsers.data });\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator\"))\r\n    }\r\n    //////////////GET ALL ROLES AND DEPARMENTS////////////\r\n    getAllRoles = () => {\r\n        API.getAllRoles()\r\n            .then(resAllRoles => {\r\n                this.setState({ allRoles: resAllRoles.data });\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator\"))\r\n    }\r\n    //////////////////get one row to update//////////////\r\n    getOneUser = (userId) => {\r\n        API.getOneUser({ id: userId })\r\n            .then(resUserId => {\r\n                this.setState({ getOneUser: resUserId.data })\r\n                toast.success(\"update selected user\")\r\n                this.closeButton()\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator. (getting one user)\"))\r\n    }\r\n    /////////////////UPDATE ONE USER////////////\r\n    updateOne = (id) => {\r\n\r\n        this.setState({ fName: this.state.fName })\r\n        console.log(this.state)\r\n    }\r\n    //////////////////////////////////////////\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n    closeButton = () => {\r\n        var x = document.getElementById(\"popupUpdate\");\r\n        if (x.style.display === \"none\") {\r\n            x.style.display = \"block\";\r\n\r\n        } else {\r\n            x.style.display = \"none\";\r\n        }\r\n\r\n    }\r\n    resetAll = () => {\r\n        this.setState({\r\n            fName: '',\r\n            lName: '',\r\n            address: '',\r\n            addressUnit: '',\r\n            addressCity: '',\r\n            addressState: '',\r\n            addressZip: '',\r\n            email: '',\r\n            phone: '',\r\n            companyName: '',\r\n            description: '',\r\n            logo: '',\r\n            password: '',\r\n            role: '',\r\n            allRoles: [],\r\n            allUsers: [],\r\n            getOneUser: []\r\n        })\r\n    }\r\n    ///////////////////////////////////////////\r\n    render() {\r\n        return (\r\n            <div className=\"topSpacing\">\r\n                <Container>\r\n                    <Form>\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formGridFname\">\r\n                                <Form.Label>First Name</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"fName\" type=\"text\" placeholder=\"Example: John\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formGridLname\">\r\n                                <Form.Label>Last Name</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"lName\" type=\"text\" placeholder=\"Example: Wick\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"email\" type=\"email\" placeholder=\"Enter email\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formGridPassword\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"password\" type=\"password\" placeholder=\"Password\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formGridPhone\">\r\n                                <Form.Label>Phone</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"phone\" type=\"tel\" pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\" placeholder=\"xxxxxxxxxx\" />\r\n                            </Form.Group>\r\n                            <Form.Group as={Col} controlId=\"formGridCompanyName\">\r\n                                <Form.Label>Company Name</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"companyName\" type=\"text\" placeholder=\"Example: Google\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formGridAddress1\">\r\n                                <Form.Label>Address</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"address\" placeholder=\"1234 Main St\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId=\"formGridAddress2\">\r\n                                <Form.Label>Address 2</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"addressUnit\" placeholder=\"Apartment, studio, or floor\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n\r\n                        <Form.Row>\r\n                            <Form.Group as={Col} controlId=\"formGridCity\">\r\n                                <Form.Label>City</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"addressCity\" type=\"text\" placeholder=\"Example: Los Angeles\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId=\"formGridState\">\r\n                                <Form.Label>State</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"addressState\" type=\"text\" placeholder=\"Example: CA\" />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group as={Col} controlId=\"formGridZip\">\r\n                                <Form.Label>Zip</Form.Label>\r\n                                <Form.Control onChange={this.handleInputChange} name=\"addressZip\" type=\"text\" placeholder=\"Example: 90001\" />\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n\r\n                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                            <Form.Label>Comment or Description</Form.Label>\r\n                            <Form.Control onChange={this.handleInputChange} name=\"description\" as=\"textarea\" rows=\"3\" />\r\n                        </Form.Group>\r\n                        <Form.Group as={Col} controlId=\"formGridRole\">\r\n                            <Form.Label>Role</Form.Label>\r\n\r\n                            {this.state.allRoles.length ? (\r\n                                <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"role\">\r\n                                    <option>Choose...</option>\r\n                                    {this.state.allRoles.map(singleRole => (\r\n                                        <option value={singleRole.id}>{singleRole.name}</option>\r\n                                    ))}\r\n                                </Form.Control>\r\n\r\n                            ) : (<h3></h3>)}\r\n                        </Form.Group>\r\n                        <Button onClick={this.saveNewUser} variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                    </Button>\r\n                    </Form>\r\n                    {/* ///////////ُSHOW ALL THE USERS//////////// */}\r\n                </Container>\r\n                <hr />\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col size=\"md-12\">\r\n                            <h2 className=\"text-center\">\r\n                                User Lists\r\n                            </h2>\r\n                        </Col>\r\n                    </Row>\r\n                    {/* update popup */}\r\n                    <div id=\"popupUpdate\">\r\n                        <Modal.Dialog className=\"editFormCustomClass\" >\r\n                            <Modal.Header closeButton onClick={() => this.closeButton()}>\r\n                                <Modal.Title>Update selected user</Modal.Title>\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <p>Please update the information below and save.</p>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>First Name</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"fName\" type=\"text\" defaultValue={this.state.getOneUser.fName} />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Last Name</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"lName\" type=\"text\" placeholder={this.state.getOneUser.lName} />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Email</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"email\" type=\"text\" placeholder={this.state.getOneUser.email} />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Phone</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"phone\" type=\"text\" placeholder={this.state.getOneUser.phone} />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Company Name</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"companyName\" type=\"text\" placeholder={this.state.getOneUser.companyName} />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Address</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"phone\" type=\"text\" placeholder={this.state.getOneUser.address} />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Address Unit</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"addressUnit\" type=\"text\" placeholder={this.state.getOneUser.addressUnit} />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>City</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"addressCity\" type=\"text\" placeholder={this.state.getOneUser.addressCity} />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>State</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"addressState\" type=\"text\" placeholder={this.state.getOneUser.addressState} />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Zip</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"addressZip\" type=\"text\" placeholder={this.state.getOneUser.addressZip} />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>Logo</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"logo\" type=\"text\" placeholder={this.state.getOneUser.logo} />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col}>\r\n                                        <Form.Label>New Password</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"password\" type=\"password\" placeholder={this.state.getOneUser.password} />\r\n                                    </Form.Group>\r\n                                    <Form.Group as={Col} controlId=\"formGridRole\">\r\n                                        <Form.Label>Role</Form.Label>\r\n\r\n                                        {this.state.allRoles.length ? (\r\n                                            <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"role\">\r\n                                                <option>Choose...</option>\r\n                                                {this.state.allRoles.map(singleRole => (\r\n                                                    <option value={singleRole.id}>{singleRole.name}</option>\r\n                                                ))}\r\n                                            </Form.Control>\r\n\r\n                                        ) : (<h3></h3>)}\r\n                                    </Form.Group>\r\n\r\n                                </Form.Row>\r\n                                <Form.Row>\r\n                                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                        <Form.Label>Comment or Description</Form.Label>\r\n                                        <Form.Control onChange={this.handleInputChange} name=\"description\" as=\"textarea\" rows=\"3\" />\r\n                                    </Form.Group>\r\n                                </Form.Row>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Row>\r\n                                    <Col size=\"md-12\">\r\n                                        <Button onClick={() => this.updateOne(this.state.getOneUser.id)} variant=\"primary\">Save changes</Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Modal.Footer>\r\n                        </Modal.Dialog>\r\n                    </div>\r\n                    {/* SHOWING USERS */}\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                            <tr>\r\n                                <td>ID</td>\r\n                                <td>Full Name</td>\r\n                                <td>Email</td>\r\n                                <td>Phone</td>\r\n                                <td>Address</td>\r\n                                <td>Company Name</td>\r\n                                <td>Role</td>\r\n                                <td>Created Date</td>\r\n                                <td>Updated Date</td>\r\n                                <td>Description</td>\r\n                                <td>Edit</td>\r\n                                <td>Delele</td>\r\n                            </tr>\r\n                        </thead>\r\n                        {this.state.allUsers.length ? (\r\n                            <tbody>\r\n                                {this.state.allUsers.map(singleUser => (\r\n                                    <tr key={singleUser.id}>\r\n                                        <td name=\"roleId\">{singleUser.id}</td>\r\n                                        <td>{singleUser.fName} {singleUser.lName}</td>\r\n                                        <td>{singleUser.email} </td>\r\n                                        <td>{singleUser.phone} </td>\r\n                                        <td>{singleUser.address}, {singleUser.addressUnit}, {singleUser.addressCity}, {singleUser.addressState} {singleUser.addressZip}</td>\r\n                                        <td>{singleUser.companyName}</td>\r\n                                        <td>{singleUser.Role.name}</td>\r\n                                        <td><Moment format=\"MM/DD/YYYY HH:mm\" date={singleUser.createdAt} /></td>\r\n                                        <td><Moment format=\"MM/DD/YYYY HH:mm\" date={singleUser.updatedAt} /></td>\r\n                                        <td>{singleUser.description}</td>\r\n                                        <td className=\"text-center\"><Button onClick={() => this.getOneUser(singleUser.id)} variant=\"primary\">Edit</Button></td>\r\n                                        <td className=\"text-center\"><Button onClick={() => this.deleteUser(singleUser.id)} variant=\"danger\">Delete</Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        ) : (<h3>Loading...</h3>)}\r\n                    </Table>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Users;","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport { toast } from \"react-toastify\"\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Row, Container } from \"../components/Grid\";\r\nimport \"./style.css\";\r\nimport { Modal, Button, Form, Col } from 'react-bootstrap';\r\n\r\nclass Clients extends Component {\r\n    state = {\r\n        allCustomers: [],\r\n        allServicesClient: [],\r\n        subSingleMenu: [],\r\n        customerId: null,\r\n        status: [\r\n            { value: \"0\", label: \"Not Activated\" },\r\n            { value: \"1\", label: \"Waiting on Client\" },\r\n            { value: \"2\", label: \"Completed\" },\r\n            { value: \"3\", label: \"Canceled\" }\r\n        ],\r\n        updateStatus: '',\r\n        updateEmployee: '',\r\n        getOneEmployee: [],\r\n        getAllEmployees: []\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAllServiceCustomers();\r\n        this.getAllDeparments();\r\n    }\r\n\r\n    ///////////////GET ALL EMPLOYEES///////////\r\n    getAllDeparments = () => {\r\n        API.getAllDeparments({})\r\n            .then(resGetAllDeparments => {\r\n                this.setState({ getAllEmployees: resGetAllDeparments.data })\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (getting all departments)\"))\r\n    }\r\n    //////////////////GET ONE EMPLOYEE//////////\r\n    getEmployee = (selectedId, serviceId) => {\r\n        let selctedEmployee = (this.state.getAllEmployees.filter(obj => obj.id === selectedId))\r\n        return (\r\n\r\n            selctedEmployee.map(singleSelctedEmployee => (\r\n                <Form.Control onChange={(evt) => this.updateAsseignedEmoloyee(evt, serviceId)} as=\"select\" name=\"updateEmployee\">\r\n                    <option value={singleSelctedEmployee.id}>{singleSelctedEmployee.fName} {singleSelctedEmployee.lName} - {singleSelctedEmployee.Role.name}</option>\r\n                    {this.getAllEmployeesoptions(selectedId)}\r\n                </Form.Control>\r\n            )\r\n            ))\r\n    }\r\n    getAllEmployeesoptions = (selectedId) => {\r\n        let selctedEmployee = (this.state.getAllEmployees.filter(obj => obj.id !== selectedId))\r\n        return (\r\n            selctedEmployee.map(singleEmployee => (\r\n                <option value={singleEmployee.id}>{singleEmployee.fName} {singleEmployee.lName} - {singleEmployee.Role.name}</option>\r\n            ))\r\n        )\r\n    }\r\n    updateAsseignedEmoloyee = (event, serviceId) => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        }, () => this.updateAsseignedEmoloyeeAPI(serviceId))\r\n    }\r\n    updateAsseignedEmoloyeeAPI = (serviceId) => {\r\n        API.updateEmployee({\r\n            id: serviceId,\r\n            employeeId: this.state.updateEmployee\r\n        })\r\n            .then(updatedResult => {\r\n                toast.success(\"Assinged Employeed updated successfully!\")\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (updating assigned employee)\"))\r\n    }\r\n    //////////////Get All Customers////////////////\r\n    getAllServiceCustomers = () => {\r\n        API.getAllServiceCustomers()\r\n            .then(resCustomer => {\r\n                this.setState({ allCustomers: resCustomer.data })\r\n            }).catch(err => {\r\n                toast.error(\"There is an error. Please contact administrator (Getting All Customers)\")\r\n            })\r\n    }\r\n    /////////////Get services for a selected client//////\r\n    serviceClient = () => {\r\n        this.setState({ allServicesClient: '' })\r\n        API.serviceClient({ clientId: this.state.customerId })\r\n            .then(resServiceClient => {\r\n                this.setState({ allServicesClient: resServiceClient.data });\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Getting Services for the selected service)\"));\r\n    }\r\n    ////////////////UPDATE STATUS///////////////\r\n    updateStatus = (event, updateIdStatus) => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        }, () => this.updateRealStatus(updateIdStatus));\r\n\r\n    }\r\n    updateRealStatus = (evet) => {\r\n        if (this.state.updateStatus === 0 || this.state.updateStatus === null) {\r\n            toast.error(\"Please select an update\")\r\n        }\r\n        else {\r\n            API.updateStatus({\r\n                id: evet,\r\n                content: this.state.updateStatus\r\n            }).then(result => {\r\n                toast.success(\"The Status updated successfully\")\r\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Updating status)\"));\r\n        }\r\n    }\r\n    //////////////////////////\r\n    selectFunction = (selectedId) => {\r\n\r\n        if (selectedId === 0) {\r\n            return (<option className=\"notActive\" value=\"0\">Not Activate</option>)\r\n        }\r\n        else if (selectedId === 1) {\r\n            return (<option className=\"waiting\" value=\"1\">Waiting on Client</option>)\r\n\r\n        }\r\n        else if (selectedId === 2) {\r\n            return (<option className=\"completed\" value=\"2\">Completed</option>)\r\n\r\n        }\r\n        else if (selectedId === 3) {\r\n            return (<option className=\"canceled\" value=\"3\">Canceled</option>)\r\n\r\n        }\r\n        else {\r\n            return (<option>Select...</option>)\r\n        }\r\n    }\r\n    /////////////MENU SERVICE SIDEBAR//////////\r\n    serviceMenu = () => {\r\n        return (\r\n            <ol>\r\n                {this.state.allServicesClient.map((singleMenu) => {\r\n                    if (singleMenu.Service.subId === 0) {\r\n                        return (\r\n                            <li key={singleMenu.id}>{singleMenu.Service.serviceName}\r\n                                <Form>\r\n                                    <Form.Row>\r\n                                        <Form.Group as={Col}>\r\n                                            <Form.Label className=\"serviceTitle\">Status</Form.Label>\r\n                                            <Form.Control onChange={(evt) => this.updateStatus(evt, singleMenu.id)} /* placeholder={this.selectFunction(singleMenu.status)} */ as=\"select\" name=\"updateStatus\">\r\n                                                {this.selectFunction(singleMenu.status)}\r\n                                                <option className=\"notActive\" value=\"0\">Not Activate</option>\r\n                                                <option className=\"waiting\" value=\"1\">Waiting on Client</option>\r\n                                                <option className=\"completed\" value=\"2\">Completed</option>\r\n                                                <option className=\"canceled\" value=\"3\">Canceled</option>\r\n                                            </Form.Control>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Col}>\r\n                                            <Form.Label className=\"serviceTitle\">Assigned Employee</Form.Label>\r\n\r\n                                            {this.getEmployee(singleMenu.employeeId, singleMenu.id)}\r\n\r\n                                        </Form.Group>\r\n                                    </Form.Row>\r\n                                </Form>\r\n                                {this.subMenuMain(singleMenu.ServiceId)}\r\n                            </li>\r\n                        )\r\n                    }\r\n                })}\r\n            </ol>\r\n        )\r\n    }\r\n\r\n    subMenuMain = (subIdSearch) => {\r\n        let ParentsubMenu = (this.state.allServicesClient.filter(obj => obj.Service.subId === subIdSearch))\r\n\r\n        return (\r\n            ParentsubMenu.map(singleParentsubMenu => (\r\n                <ul>\r\n                    <li key={singleParentsubMenu.id}>{singleParentsubMenu.Service.serviceName}\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col}>\r\n                                    <Form.Control onChange={(evt) => this.updateStatus(evt, singleParentsubMenu.id)} as=\"select\" name=\"updateStatus\">\r\n                                        {this.selectFunction(singleParentsubMenu.status)}\r\n                                        <option className=\"notActive\" value=\"0\">Not Activate</option>\r\n                                        <option className=\"waiting\" value=\"1\">Waiting on Client</option>\r\n                                        <option className=\"completed\" value=\"2\">Completed</option>\r\n                                        <option className=\"canceled\" value=\"3\">Canceled</option>\r\n                                    </Form.Control>\r\n\r\n                                </Form.Group>\r\n                                <Form.Group as={Col}>\r\n                                    <Form.Label className=\"serviceTitle\">Assigned Employee</Form.Label>\r\n                                    {this.getEmployee(singleParentsubMenu.employeeId, singleParentsubMenu.id)}\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                        </Form>\r\n                        {this.subMenuMain(singleParentsubMenu.ServiceId)}\r\n                    </li>\r\n                </ul >\r\n            ))\r\n        )\r\n    }\r\n    ////////////////////////////\r\n    handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n\r\n    };\r\n    ///////////////////////////\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col size=\"md-12\">\r\n                        <h2 className=\"text-center\"> Set up services to a client</h2>\r\n                        <Form.Row>\r\n                            <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"customerId\">\r\n                                <option>Choose...</option>\r\n                                {this.state.allCustomers.map(singleCustomer => (\r\n                                    <option key={singleCustomer.clientId} value={singleCustomer.clientId}>{singleCustomer.User.fName} - {singleCustomer.User.lName} - {singleCustomer.User.companyName}</option>\r\n                                ))}\r\n                            </Form.Control>\r\n                            <br /><br />\r\n                            <Button onClick={this.serviceClient} variant=\"primary\" type=\"submit\">\r\n                                Search\r\n                            </Button>\r\n                        </Form.Row>\r\n                    </Col>\r\n                </Row>\r\n                {/* ///////////////////show services */}\r\n                <hr />\r\n                <Row>\r\n                    <Col size=\"md-12\">\r\n                        <h2 className=\"text-center\">Here are the services</h2>\r\n                        {this.state.allServicesClient.length > null ? this.serviceMenu() : (<p>Please choose a client to see the services</p>)}\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clients;","import React, { Component } from \"react\";\r\n//import API from \"../utils/API\";\r\nimport { toast } from \"react-toastify\"\r\nimport { Link } from \"react-router-dom\";\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport \"./style.css\"\r\n\r\nclass NoMatch extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col size=\"md-12\">\r\n                    <h1 className=\"text-center\">Are you lost?!</h1>    \r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nexport default NoMatch;","import React from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport TopNav from \"./components/TopNav\";\nimport Role from \"./pages/Role\";\nimport Service from \"./pages/Service\";\nimport Users from \"./pages/User\";\nimport Clients from \"./pages/Clients\";\nimport NoMatch from \"./pages/NoMatch\";\n\n\n\nfunction App() {\n  return (\n    <Router>\n      \n      <div>\n      <TopNav />\n        <ToastContainer />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/roles\" component={Role} />\n          <Route exact path=\"/users\" component={Users} />\n          <Route exact path=\"/clients\" component={Clients} />\n          <Route exact path=\"/services\" component={Service} />\n          <Route component={NoMatch} />\n        </Switch>\n      </div>\n\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}