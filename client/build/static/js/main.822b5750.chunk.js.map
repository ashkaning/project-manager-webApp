{"version":3,"sources":["utils/API.js","components/TopNav/index.js","components/Form/index.js","components/Grid/index.js","pages/Home.js","pages/Role.js","pages/Service.js","pages/User.js","pages/Clients.js","pages/NoMatch.js","App.js","index.js"],"names":["API","logOut","axios","get","NewRol","role","post","getAllRoles","deleteRole","delete","getOneRole","updateOneRole","put","loginSession","getSession","usersLogin","authtData","saveNewUser","user","getAllUsers","getOneUser","getAllServices","saveNewService","service","deleteService","getOneServiceInfo","updateOneService","getAllCustomers","assignAllServiceToClient","getAllDeparments","getAllServiceCustomers","serviceClient","customerId","updateStatus","data","updateEmployee","TopNav","_ref","params","children","console","log","react_default","a","createElement","Input","props","className","Object","assign","FormBtn","style","float","marginBottom","Container","fluid","concat","Row","_ref2","Col","_ref3","size","split","map","join","ColDark","_ref4","Home","state","email","password","alertText","handleInputChange","event","_event$target","target","name","value","_this","setState","defineProperty","handleFormSubmit","preventDefault","then","result","isUserLoggin","toast","info","history","push","some","error","catch","err","res","isSuccess","this","color","onChange","placeholder","type","onClick","Component","Role","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","userId","roleName","updateRoleName","updateRoleDesc","checkSession","resAllRoles","allRoles","description","roleDesc","success","resetFeilds","id","resDelete","resGetOneRole","document","getElementById","display","resOneUpdate","handleTextChange","closeButton","bind","assertThisInitialized","_this2","Table","striped","bordered","hover","length","singleRole","key","Button","variant","Modal","Dialog","Header","Title","Body","Footer","Services","serviceName","serviceDescription","subId","updateServiceName","UpdateSubId","updateserviceDescription","DeparmentId","allServices","oneService","resOneServ","resParent","allCustomers","allDeparments","servicesToCustomer","resAllServices","resAllServoces","serviceMenu","window","location","reload","evt","deleleServiceId","resDel","serviceId","resGetOne","resCustomer","resDeparments","singleMenu","href","subMenuMain","subIdSearch","filter","obj","singleParentsubMenu","savedResult","x","esm_Col","Form","Label","Control","as","singleService","rows","siz","Group","singleCustomer","fName","lName","singleDeparment","Users","address","addressUnit","addressCity","addressState","addressZip","phone","companyName","logo","allUsers","roleId","resSucceed","resetAll","resAllUsers","resUserId","updateOne","controlId","pattern","defaultValue","singleUser","dist_default","format","date","createdAt","updatedAt","deleteUser","Clients","allServicesClient","subSingleMenu","status","label","getOneEmployee","getAllEmployees","resGetAllDeparments","getEmployee","selectedId","singleSelctedEmployee","updateAsseignedEmoloyee","getAllEmployeesoptions","singleEmployee","updateAsseignedEmoloyeeAPI","employeeId","updatedResult","clientId","resServiceClient","updateIdStatus","_event$target2","updateRealStatus","evet","content","selectFunction","Service","ServiceId","_event$target3","User","NoMatch","App","BrowserRouter","react_toastify","Switch","Route","exact","path","component","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.822b5750.chunk.js","sourcesContent":["import axios from \"axios\";\nexport default {\n    /* MENU */\n    logOut: function(){\n        return axios.get(\"/api/logOut\")\n    },\n    /* Roles/Deparments API */\n    NewRol: function (role) {\n        return axios.post(\"/api/role\", role);\n    },\n    getAllRoles: function () {\n        return axios.get(\"/api/role\");\n    },\n    deleteRole: function (role) {\n        return axios.delete(\"/api/role/\", role);\n    },\n    getOneRole: function (role) {\n        return axios.post(\"/api/getOneRole\", role);\n    },\n    updateOneRole: function (role) {\n        return axios.put(\"/api/role\", role);\n    },\n    /* Users API */\n    loginSession: function () {\n        return axios.get(\"/api/login\")\n    },\n    getSession: function () {\n        return axios.get(\"/api/session\")\n    },\n    usersLogin: function (authtData) {\n        return axios.post(\"/api/login\", authtData)\n    },\n    saveNewUser: function (user) {\n        return axios.post(\"/api/user\", user);\n    },\n    getAllUsers: function () {\n        return axios.get(\"/api/user\");\n    },\n    getOneUser: function (user) {\n        return axios.post(\"/api/getOneUser\", user)\n    },\n    /* Services API */\n    getAllServices: function () {\n        return axios.get(\"/api/service\");\n    },\n    saveNewService: function (service) {\n        return axios.post(\"/api/service\", service);\n    },\n    deleteService: function (service) {\n        return axios.delete(\"/api/service\", service);\n    },\n    getOneServiceInfo: function (service) {\n        return axios.post(\"/api/getOneService\", service);\n    },\n    updateOneService: function (service) {\n        return axios.put(\"/api/service\", service);\n    },\n    getAllCustomers: function () {\n        return axios.get(\"/api/assignServicesAndAllCustomers\");\n    },\n    assignAllServiceToClient: function (service) {\n        return axios.post(\"/api/assignServicesAndAllCustomers\", service);\n    },\n    getAllDeparments: function () {\n        return axios.get(\"/api/getAllDeparments\")\n    },\n    /* Services Customers */\n    getAllServiceCustomers: function () {\n        return axios.get(\"/api/serviceCustomer\")\n    },\n    serviceClient: function (customerId) {\n        return axios.post(\"api/serviceCustomer\", customerId)\n    },\n    updateStatus: function (data) {\n        return axios.put(\"/api/serviceCustomer\", data);\n    },\n    updateEmployee: function (data) {\n        return axios.put(\"/api/serviceCustomerAssignedEmployeeUpdate\", data)\n    }\n\n}","import React, { Children } from \"react\";\nimport \"./style.css\";\n\n\nexport function TopNav({params,children}) {\n  console.log(params)\n  return(\n    <p></p>\n  )\n}\n/* export function TopNav({userId}) {\n\n\n  return <p>hi</p>\n} */\n/* class TopNav extends Component {\n  state = {\n    userId: null\n  }\n  TopNav = userId => {\n    console.log(userId)\n  }\n  constructor(props) {\n    super(props);\n  }\n  componentDidMount() {\n    this.checkSession();\n  }\n  checkSession = () => {\n    API.getSession()\n      .then((res) => {\n        if (res.data.isUserLoggin) {\n          this.setState({\n            userId: res.data.userId\n          })\n        }\n        else {\n          this.setState({ userId: null })\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  logOut = (evt) => {\n    //evt.preventDefault()\n    API.logOut()\n      .then(res => {\n        if (res.status === 200) {\n          this.props.history.push('/', { some: 'state' })\n        }\n      }).catch(err => {\n        console.log(err)\n      })\n  }\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg sticky-top navbar-light bg-light bg-navBar\">\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse justify-content-center\" id=\"navbarNav\">\n          <ul className=\"navbar-nav\" id=\"category-nav\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/roles\">Departments/Roles</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/services\">Services</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/clients\">Clients</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/users\">Users</a>\n            </li>\n\n            <li className=\"nav-item\">\n              {this.state.userId === null ? '' : <a className=\"nav-link\" href=\"\" onClick={this.logOut}>Log Out</a>}\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\nexport default TopNav; */","import React from \"react\";\nimport \"./style.css\"\n\n// This file exports the Input, TextArea, and FormBtn components\n\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n\nexport function SelectBox({ props, children }){\n  return (\n    <div className=\"form-group\">\n      <select className=\"postCategory\" {...props}>\n        {children}\n      </select>\n    </div>\n  );\n}\nexport function TextArea({ props }){\n  return (\n    <div className=\"form-group\">\n       <textarea className=\"form-control\" {...props}> </textarea>\n    </div>\n  );\n}\n\nexport function FormBtn(props) {\n  return (\n    <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\n      {props.children}\n    </button>\n  );\n}\n\n","import React from \"react\";\nimport \"./style.css\"\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\nexport function ColDark({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"colDarkBg col-\" + size)\n        .join(\" \") \n      }\n    >\n      {children}\n    </div>\n  );\n}\nexport function ColLight({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"colLightBorder col-\" + size)\n        .join(\" \") \n      }\n    >\n      {children}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { toast } from \"react-toastify\"\nimport { Input, FormBtn } from \"../components/Form\";\nimport { Link } from \"react-router-dom\";\nimport 'react-toastify/dist/ReactToastify.css'\nimport { Col, Row, Container, ColDark } from \"../components/Grid\";\nimport \"./style.css\"\n\nclass Home extends Component {\n    state = {\n        email: \"\",\n        password: \"\",\n        alertText: \"\"\n    };\n    componentDidMount() {\n        this.loginSession();\n    }\n    handleInputChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n    handleFormSubmit = event => {\n        event.preventDefault();\n        API.usersLogin({\n            email: this.state.email,\n            password: this.state.password\n        })\n            .then((result) => {\n                if (!(result.data.isUserLoggin)) {\n                    toast.error(\"username or password is wrong\");\n\n                } else {\n                    toast.info(\"redirecting to your profile\");\n                    this.props.history.push('/users', { some: 'state' })\n\n                }\n\n            })\n            .catch(err => console.log(err));\n    }\n    loginSession = () => {\n        API.loginSession()\n            .then((res) => {\n                console.log(res.data)\n                if (res.data.isSuccess === \"Yes\" && res.data.isUserLoggin === true) {\n                    toast.info(\"You are logged in... !\");\n                    this.props.history.push('/users', { some: 'state' })\n                }\n                else if (res.data.isSuccess === \"No\" && res.data.isUserLoggin === false) {\n                    toast.info(\"Please Try To Login... !\");\n                }\n                else { }\n            })\n            .catch(err => console.log(err))\n    }\n    render() {\n        return (\n            <Container fluid>\n                <Row>\n                    <Col size=\"md-12 sm-12\">\n                        <Col size=\"md-12\">\n                            <h1 className=\"text-center\">Login</h1>\n                            <h3 style={{ color: 'red' }}></h3>\n                        </Col>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col size=\"md-4\"></Col>\n                    <ColDark size=\"md-4\">\n                        <form>\n                            <label>Email:</label>\n                            <Input\n                                onChange={this.handleInputChange}\n                                name=\"email\"\n                                placeholder=\"johnwick@site.com (required)\"\n                            />\n                            <label>Password:</label>\n                            <Input\n                                onChange={this.handleInputChange}\n                                name=\"password\"\n                                type=\"password\"\n                                placeholder=\"***** (required)\"\n                            />\n                            <hr />\n                            <FormBtn\n                                onClick={this.handleFormSubmit}\n                            >\n                                Login\n                            </FormBtn>\n                        </form>\n                    </ColDark>\n                    <Col size=\"md-4\"></Col>\n                </Row>\n                <Row>\n                    <Col size=\"md-12\">\n                        <div className=\"spacer\"></div>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\nexport default Home;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { toast } from \"react-toastify\"\nimport 'react-toastify/dist/ReactToastify.css'\nimport { Input, FormBtn } from \"../components/Form\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Table, Button, Modal } from 'react-bootstrap';\n\nclass Role extends Component {\n    state = {\n        userId: null,\n        roleName: \"\",\n        updateRoleName: \"\",\n        updateRoleDesc: \"\"\n    };\n    constructor(props) {\n        super(props);\n        this.state = {\n            roleDesc: \"\",\n            allRoles: [],\n            getOneRole: []\n        };\n        this.handleTextChange = this.handleTextChange.bind(this);\n    }\n\n    componentDidMount() {\n        this.checkSession();\n        this.getAllRoles();\n    }\n    checkSession = () => {\n        API.getSession()\n            .then((res) => {\n                if (!(res.data.isUserLoggin)) {\n                    this.setState({ userId: null })\n                    this.props.history.push('/', { some: 'state' })\n                } else {\n                    this.setState({\n                        userId: res.data.userId\n                    })\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    /////////////////////Get all info from Roles db////////////////////\n    getAllRoles = () => {\n        API.getAllRoles()\n            .then(resAllRoles => {\n                this.setState({ allRoles: resAllRoles.data })\n            }).catch(err => toast.error(\"There is an error. Please contact administrator\"))\n    }\n    ////////////////////Insert Function for Making Roles//////////////////\n    handleFormSubmit = event => {\n        event.preventDefault()\n        API.NewRol({\n            name: this.state.roleName,\n            description: this.state.roleDesc\n        })\n            .then((result) => {\n                toast.success(\"New role added!\")\n                this.getAllRoles();\n                this.resetFeilds();\n            })\n            .catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\n    }\n    ////////////////////DELETE FUNCTION///////////////////////\n    deleteRole = (id) => {\n        var data = { id: id }\n        API.deleteRole({ data })\n            .then(resDelete => {\n                toast.success(\"Role Deleted!\")\n                this.getAllRoles();\n            })\n            .catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\n    }\n    ///////////////////GET INFORAMTION ON UPDATE CLICK AND UPDATE FUNCTION////////////\n    getOneRole = (id) => {\n        API.getOneRole({ id: id })\n            .then(resGetOneRole => {\n                toast.success(\"Please updae the information below\")\n                this.setState({\n                    getOneRole: resGetOneRole.data\n                })\n                document.getElementById(\"popupUpdate\").style.display = 'block';\n            }).catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\n    }\n    updateOneRole = (id) => {\n        API.updateOneRole({\n            id: id,\n            name: this.state.updateRoleName,\n            description: this.state.updateRoleDesc\n        })\n            .then(resOneUpdate => {\n                toast.success(\"The role updated\")\n                this.getAllRoles();\n                this.resetFeilds();\n            }).catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\n    }\n    /////////////////GET INFORMATION FROM INPUTS//////////////////////////\n    handleTextChange = event => {\n        this.setState({\n            roleDesc: event.target.value\n        });\n    };\n    handleInputChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n    resetFeilds = () => {\n        this.setState({\n            roleDesc: '',\n            roleName: '',\n            updateRoleName: '',\n            updateRoleDesc: ''\n        })\n    }\n    closeButton = () => {\n        document.getElementById(\"popupUpdate\").style.display = 'none';\n        toast.error(\"Update box closed\")\n    }\n    //////////////////////////////////////////\n    render() {\n        return (\n            this.state.userId === null ? <p></p> :\n            <Container>\n                <Row>\n                    <Col size=\"md-12\">\n                        <h2 className=\"text-center\">\n                            Department List\n                        </h2>\n                    </Col>\n                    <Col size=\"md-12\">\n                        <Table striped bordered hover>\n                            <thead>\n                                <tr>\n                                    <td>ID</td>\n                                    <td>Role Name</td>\n                                    <td>Role Description</td>\n                                    <td>Edit</td>\n                                    <td>Delele</td>\n                                </tr>\n                            </thead>\n                            {this.state.allRoles.length ? (\n                                <tbody>\n                                    {this.state.allRoles.map(singleRole => (\n\n                                        <tr key={singleRole.id}>\n\n                                            <td name=\"roleId\">{singleRole.id}</td>\n                                            <td>{singleRole.name}</td>\n                                            <td>{singleRole.description}</td>\n                                            <td className=\"text-center\"><Button onClick={() => this.getOneRole(singleRole.id)} variant=\"primary\">Edit</Button></td>\n                                            <td className=\"text-center\"><Button onClick={() => this.deleteRole(singleRole.id)} variant=\"danger\">Delete</Button>\n                                            </td>\n\n                                        </tr>\n\n                                    ))}\n                                </tbody>\n                            ) : (<h3>Loading...</h3>)}\n\n                        </Table>\n                    </Col>\n                </Row>\n                <hr />\n                <Row>\n                    <Col size=\"md-6\">\n                        <Modal.Dialog id=\"popupUpdate\">\n                            <Modal.Header closeButton onClick={() => this.closeButton()}>\n                                <Modal.Title>Update Role</Modal.Title>\n                            </Modal.Header>\n\n                            <Modal.Body>\n                                <p>Please update the information below and save.</p>\n                            </Modal.Body>\n\n                            <Modal.Footer>\n                                <Row>\n                                    <Col size=\"md-6\">\n\n                                        <input onChange={this.handleInputChange} name=\"updateRoleName\" placeholder={this.state.getOneRole.name} />\n                                    </Col>\n                                    <Col size=\"md-6\">\n                                        <input onChange={this.handleInputChange} name=\"updateRoleDesc\" placeholder={this.state.getOneRole.description} />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col size=\"md-12\">\n                                        <Button onClick={() => this.updateOneRole(this.state.getOneRole.id)} variant=\"primary\">Save changes</Button>\n                                    </Col>\n                                </Row>\n                            </Modal.Footer>\n                        </Modal.Dialog>\n                    </Col>\n                    <Col size=\"md-6\">\n                        <form>\n                            <div className=\"form-group\">\n                                <input className=\"form-control\" name=\"roleName\" onChange={this.handleInputChange} value={this.state.roleName} placeholder=\"Marketing or Development (required)\" />\n                                <textarea name=\"roleDesc\" className=\"form-control\" onChange={this.handleTextChange} ></textarea>\n                            </div>\n                            <FormBtn\n                                onClick={this.handleFormSubmit}\n                            >\n                                Post\n                        </FormBtn>\n                        </form>\n                    </Col>\n\n                </Row>\n\n            </Container>\n\n        );\n    }\n}\nexport default Role;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { toast } from \"react-toastify\"\nimport 'react-toastify/dist/ReactToastify.css'\nimport { Row, Container } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Modal, Button, Form, Col } from 'react-bootstrap';\n\nclass Services extends Component {\n\n    state = {\n        userId: null,\n        serviceName: '',\n        serviceDescription: '',\n        subId: '',\n        updateServiceName: '',\n        UpdateSubId: '',\n        updateserviceDescription: '',\n        customerId: '',\n        DeparmentId: '',\n        allServices: [],\n        oneService: [],\n        resOneServ: [],\n        resParent: [],\n        allCustomers: [],\n        allDeparments: [],\n        servicesToCustomer: []\n    }\n    componentDidMount() {\n        this.checkSession();\n        this.getAllServices();\n        this.getAllCustomers();\n        this.getAllDeparments();\n    }\n    checkSession = () => {\n        API.getSession()\n            .then((res) => {\n                if (!(res.data.isUserLoggin)) {\n                    this.setState({ userId: null })\n                    this.props.history.push('/', { some: 'state' })\n                } else {\n                    this.setState({\n                        userId: res.data.userId\n                    })\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    //////////////////////////\n    getAllServices = () => {\n        API.getAllServices()\n            .then(resAllServices => {\n                this.setState({ allServices: resAllServices.data })\n                console.log(this.state.allServices)\n            }).catch(err => toast.error(\"There is an error. Please contact administrator. (Get ALL Service)\"))\n    }\n    /////////SAVE NNEW SERVICE API FUNCTION////////////////////\n    saveNewService = (event) => {\n        event.preventDefault()\n        API.saveNewService({\n            serviceName: this.state.serviceName,\n            serviceDescription: this.state.serviceDescription,\n            subId: this.state.subId\n        }).then(resAllServoces => {\n            this.serviceMenu();\n            toast.success(\"Menu added!\");\n            window.location.reload(false);\n\n        }).catch(err => toast.error(\"There is an error. Please contact administrator (on Saving)\"))\n    }\n    //////////////////DELETE Menu////////\n    deleteService = (evt) => {\n        API.deleteService({ data: { deleleServiceId: evt } })\n            .then(resDel => {\n                toast.success(\"The Item deleted successfully!\")\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (on Deleteing)\"))\n    }\n    ///////////////EDIT SERVICE///////////////////\n    getOneServiceInfo = (serviceId) => {\n        this.closeButton();\n        API.getOneServiceInfo({ id: serviceId })\n            .then(resGetOne => {\n                this.setState({\n                    resOneServ: resGetOne.data.resOneServ\n                })\n                if (!resGetOne.data.resParent) {\n\n                    this.setState({ resParent: { serviceName: 'Parent', id: '0' } });\n                }\n                else {\n                    this.setState({ resParent: resGetOne.data.resParent });\n                }\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (on Get One Info for Editing)\"))\n    }\n    ////////////////Get all client lists////////////\n    getAllCustomers = () => {\n        API.getAllCustomers()\n            .then(resCustomer => {\n                this.setState({ allCustomers: resCustomer.data })\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Getting All Customers)\"))\n    }\n    getAllDeparments = () => {\n        API.getAllDeparments()\n            .then(resDeparments => {\n                this.setState({ allDeparments: resDeparments.data })\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Getting All Departmnets)\"))\n    }\n    ////////////GETTING INPUT VALUE/////////////////////\n    handleInputChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n    /////////////MENU SERVICE SIDEBAR//////////\n    serviceMenu = () => {\n        return (\n            <ol>\n                {this.state.allServices.map((singleMenu) => {\n                    if (singleMenu.subId === 0) {\n                        return (<li key={singleMenu.id}>{singleMenu.serviceName}\n                            <a className=\"customEditButton\" href=\"#\" onClick={() => this.getOneServiceInfo(singleMenu.id)} >Edit</a>\n                            <a className=\"customDeleteButton\" href=\"#\" onClick={() => this.deleteService(singleMenu.id)} >Delete</a>\n                            {this.subMenuMain(singleMenu.id)}</li>)\n                    }\n\n                })}\n            </ol>\n        )\n    }\n\n    subMenuMain = (subIdSearch) => {\n        let ParentsubMenu = (this.state.allServices.filter(obj => obj.subId === subIdSearch))\n\n        return (\n            ParentsubMenu.map(singleParentsubMenu => (\n                <ul> <li key={singleParentsubMenu.id}>{singleParentsubMenu.serviceName}\n                    <a className=\"customEditButton\" href=\"#\" onClick={() => this.getOneServiceInfo(singleParentsubMenu.id)} >Edit</a>\n                    <a className=\"customDeleteButton\" href=\"#\" onClick={() => this.deleteService(singleParentsubMenu.id)}>Delete</a>\n                    {this.subMenuMain(singleParentsubMenu.id)}</li></ul>\n            ))\n\n        )\n    }\n    /*  childSubMenu = (subIdSearch) => {\n         let childSubMenuArray = (this.state.allServices.filter(obj => obj.subId === subIdSearch))\n         return (\n             childSubMenuArray.map(singlechildSubMenuArray => (\n                 <ul>\n                     <li>{singlechildSubMenuArray.serviceName}<a className=\"customDeleteButton\" href=\"#\" onClick={() => this.deleteService(singlechildSubMenuArray.id)} variant=\"danger\">Delete</a>\n                         {this.childSubMenu(singlechildSubMenuArray.id)} </li>\n                 </ul>\n             ))\n         )\n     } */\n    //////////////////////Update selected service information\n    updateOneService = (serviceId) => {\n        API.updateOneService({\n            id: serviceId,\n            serviceName: this.state.updateServiceName,\n            subId: this.state.UpdateSubId,\n            serviceDescription: this.state.updateserviceDescription\n        })\n            .then(result => {\n                toast.success(\"service updated\");\n                this.closeButton();\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (update service)\"))\n    }\n    ////////////////Create all services assign to a customer\n    assignAllServiceToClient = () => {\n        /*  let data = {\n             customerId: this.state.customerId,\n             allServices: this.state.allServices\n         } */\n        API.assignAllServiceToClient({\n            customerId: this.state.customerId,\n            allServices: this.state.allServices,\n            DeparmentId: this.state.DeparmentId\n        })\n            .then(savedResult => {\n                toast.success(\"All services assing to the client successfully\")\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Assign services to the customer)\"))\n    }\n    /////////////////////CLOSE EDIT FORM BOX\n    closeButton = () => {\n        var x = document.getElementById(\"popupUpdate\");\n        if (x.style.display === \"none\") {\n            x.style.display = \"block\";\n\n        } else {\n            x.style.display = \"none\";\n        }\n\n    }\n    //////////////////////////////////////\n    render() {\n        return (\n            this.state.userId === null ? <p></p> :\n            <div className=\"topSpacing\">\n        \n                <Container>\n                    {/* ///////////update selected service //////////////*/}\n                    <Row>\n                        <Modal.Dialog className=\"editFormCustomClass\" id=\"popupUpdate\">\n                            <Modal.Header closeButton onClick={() => this.closeButton()}>\n                                <Modal.Title>Update selected service</Modal.Title>\n                            </Modal.Header>\n\n                            <Modal.Body>\n                                <p>Please update the information below and save.</p>\n                            </Modal.Body>\n\n                            <Modal.Footer>\n                                <Row>\n                                    <Col size=\"md-6\">\n                                        <Form.Label>Service Name</Form.Label>\n                                        <input onChange={this.handleInputChange} name=\"updateServiceName\" placeholder={this.state.resOneServ.serviceName} />\n                                    </Col>\n                                    <Col size=\"md-6\">\n                                        <Form.Label>Sub Service of</Form.Label>\n\n                                        {this.state.allServices.length ? (\n                                            <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"UpdateSubId\">\n                                                <option value={this.state.resParent.id}>{this.state.resParent.serviceName}</option>\n                                                <option>Choose...</option>\n                                                {this.state.allServices.map(singleService => (\n                                                    <option key={singleService.id} value={singleService.id}>{singleService.id} - {singleService.serviceName} - {singleService.subId}</option>\n                                                ))}\n                                            </Form.Control>\n\n                                        ) : (<h3>Loading Services...</h3>)}\n                                        <Form.Label>Service Description</Form.Label>\n                                        <Form.Control onChange={this.handleInputChange} name=\"updateserviceDescription\" placeholder={this.state.resOneServ.serviceDescription} as=\"textarea\" rows=\"1\" />\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col size=\"md-12\">\n                                        <Button onClick={() => this.updateOneService(this.state.resOneServ.id)} variant=\"primary\">Save changes</Button>\n                                    </Col>\n                                </Row>\n                            </Modal.Footer>\n                        </Modal.Dialog>\n                    </Row>\n                    {/* ////////////////////////ADD SERVICE/////////// */}\n                    <Row>\n                        <Col siz=\"md-12\">\n                            <h2 className=\"text-center\">Add Services</h2>\n                        </Col>\n                    </Row>\n\n                    {/* /////////////////add new service form */}\n                    <Row>\n                        <Col size=\"md-12\">\n                            <Form>\n                                <Form.Row>\n                                    <Form.Group as={Col}>\n                                        <Form.Label>Service Name</Form.Label>\n                                        <Form.Control onChange={this.handleInputChange} type=\"text\" name=\"serviceName\" />\n                                    </Form.Group>\n                                    <Form.Group as={Col}>\n                                        <Form.Label>Sub Service of</Form.Label>\n\n                                        {this.state.allServices.length ? (\n                                            <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"subId\">\n                                                <option>Choose...</option>\n                                                {this.state.allServices.map(singleService => (\n                                                    <option key={singleService.id} value={singleService.id}>{singleService.id} - {singleService.serviceName} - {singleService.subId}</option>\n                                                ))}\n                                            </Form.Control>\n\n                                        ) : (<h3>Loading Services...</h3>)}\n                                    </Form.Group>\n                                    <Form.Group as={Col}>\n                                        <Form.Label>Service Description</Form.Label>\n                                        <Form.Control onChange={this.handleInputChange} name=\"serviceDescription\" as=\"textarea\" rows=\"1\" />\n                                    </Form.Group>\n                                    <Form.Group as={Col}>\n                                        <Button onClick={this.saveNewService} variant=\"primary\" type=\"submit\">\n                                            Save\n                                        </Button>\n                                    </Form.Group>\n                                </Form.Row>\n                            </Form>\n                        </Col>\n                    </Row>\n                    {/* ///////////////////show services */}\n                    <hr />\n                    <Row>\n                        <Col size=\"md-12\">\n                            <h2 className=\"text-center\">Here are the services</h2>\n                            {this.serviceMenu()}\n\n                        </Col>\n                    </Row>\n                    <hr />\n                    <Row>\n                        <Col size=\"md-12\">\n                            <h2 className=\"text-center\"> Set up services to a client</h2>\n                            <Form.Row>\n                                {this.state.allCustomers.length ? (\n                                    <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"customerId\">\n                                        <option>Choose the customer...</option>\n                                        {this.state.allCustomers.map(singleCustomer => (\n                                            <option key={singleCustomer.id} value={singleCustomer.id}>{singleCustomer.fName} - {singleCustomer.lName}</option>\n                                        ))}\n\n                                    </Form.Control>\n                                ) : (<h3>Loading</h3>)}\n                                <br /><br />\n                                {this.state.allDeparments.length ? (\n                                    <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"DeparmentId\">\n                                        <option>Choose the deparment...</option>\n                                        {this.state.allDeparments.map(singleDeparment => (\n                                            <option key={singleDeparment.id} value={singleDeparment.id}>{singleDeparment.fName} - {singleDeparment.lName}</option>\n                                        ))}\n\n                                    </Form.Control>\n                                ) : (<h3>Loading</h3>)}\n                                <br /><br />\n                                <Button onClick={this.assignAllServiceToClient} variant=\"primary\" type=\"submit\">\n                                    Assign All the services to the selected client\n                            </Button>\n                            </Form.Row>\n\n                        </Col>\n\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\nexport default Services;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { toast } from \"react-toastify\"\nimport 'react-toastify/dist/ReactToastify.css'\nimport { Row, Container } from \"../components/Grid\";\nimport {TopNav} from \"../components/TopNav\";\nimport \"./style.css\";\nimport { Table, Button, Form, Col, Modal } from 'react-bootstrap';\nimport Moment from 'react-moment';\n\nclass Users extends Component {\n    state = {\n        fName: '',\n        lName: '',\n        address: '',\n        addressUnit: '',\n        addressCity: '',\n        addressState: '',\n        addressZip: '',\n        email: '',\n        phone: '',\n        companyName: '',\n        description: '',\n        logo: '',\n        password: '',\n        role: '',\n        userId: 0,\n        allRoles: [],\n        allUsers: [],\n        getOneUser: []\n    }\n\n    /*     constructor(props) {\n            super(props);\n            this.state = {\n                allRoles: []\n            };\n        } */\n\n    saveNewUser = (event) => {\n        event.preventDefault()\n        API.saveNewUser({\n            userId: null,\n            fName: this.state.fName,\n            lName: this.state.lName,\n            address: this.state.address,\n            addressUnit: this.state.addressUnit,\n            addressCity: this.state.addressCity,\n            addressState: this.state.addressState,\n            addressZip: this.state.addressZip,\n            email: this.state.email,\n            phone: this.state.phone,\n            companyName: this.state.companyName,\n            description: this.state.description,\n            logo: '',\n            password: this.state.password,\n            roleId: this.state.role,\n        }).then(resSucceed => {\n            toast.success(\"User created successfully\")\n            this.resetAll()\n        }).catch(err => toast.error(\"There is an error. Please contact adminstrator\"))\n    }\n    componentDidMount() {\n        this.checkSession();\n        this.getAllRoles();\n        this.getAllUsers();\n        this.resetAll();\n    }\n\n    checkSession = () => {\n        API.getSession()\n            .then((res) => {\n                if (!(res.data.isUserLoggin)) {\n                    this.setState({ userId: null })\n                    this.props.history.push('/', { some: 'state' })\n                } else {\n                    this.setState({\n                        userId: res.data.userId\n                    })\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    //////////////GET ALL USERS INFO///////////////\n    getAllUsers = () => {\n        API.getAllUsers()\n            .then(resAllUsers => {\n                this.setState({ allUsers: resAllUsers.data });\n            }).catch(err => toast.error(\"There is an error. Please contact administrator\"))\n    }\n    //////////////GET ALL ROLES AND DEPARMENTS////////////\n    getAllRoles = () => {\n        API.getAllRoles()\n            .then(resAllRoles => {\n                this.setState({ allRoles: resAllRoles.data });\n            }).catch(err => toast.error(\"There is an error. Please contact administrator\"))\n    }\n    //////////////////get one row to update//////////////\n    getOneUser = (userId) => {\n        API.getOneUser({ id: userId })\n            .then(resUserId => {\n                this.setState({ getOneUser: resUserId.data })\n                toast.success(\"update selected user\")\n                this.closeButton()\n            }).catch(err => toast.error(\"There is an error. Please contact administrator. (getting one user)\"))\n    }\n    /////////////////UPDATE ONE USER////////////\n    updateOne = (id) => {\n\n        this.setState({ fName: this.state.fName })\n        console.log(this.state)\n    }\n    //////////////////////////////////////////\n    handleInputChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n    closeButton = () => {\n        var x = document.getElementById(\"popupUpdate\");\n        if (x.style.display === \"none\") {\n            x.style.display = \"block\";\n\n        } else {\n            x.style.display = \"none\";\n        }\n\n    }\n    resetAll = () => {\n        this.setState({\n            fName: '',\n            lName: '',\n            address: '',\n            addressUnit: '',\n            addressCity: '',\n            addressState: '',\n            addressZip: '',\n            email: '',\n            phone: '',\n            companyName: '',\n            description: '',\n            logo: '',\n            password: '',\n            role: '',\n            allRoles: [],\n            allUsers: [],\n            getOneUser: []\n        })\n    }\n    ///////////////////////////////////////////\n    render() {\n        return (\n          \n\n                <div className=\"topSpacing\">\n                    <TopNav userId={this.state.userId} />\n                    <Container>\n                        <Form>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridFname\">\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"fName\" type=\"text\" placeholder=\"Example: John\" />\n                                </Form.Group>\n                                <Form.Group as={Col} controlId=\"formGridLname\">\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"lName\" type=\"text\" placeholder=\"Example: Wick\" />\n                                </Form.Group>\n                                <Form.Group as={Col} controlId=\"formGridEmail\">\n                                    <Form.Label>Email</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"email\" type=\"email\" placeholder=\"Enter email\" />\n                                </Form.Group>\n                                <Form.Group as={Col} controlId=\"formGridPassword\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"password\" type=\"password\" placeholder=\"Password\" />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridPhone\">\n                                    <Form.Label>Phone</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"phone\" type=\"tel\" pattern=\"[0-9]{3}[0-9]{3}[0-9]{4}\" placeholder=\"xxxxxxxxxx\" />\n                                </Form.Group>\n                                <Form.Group as={Col} controlId=\"formGridCompanyName\">\n                                    <Form.Label>Company Name</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"companyName\" type=\"text\" placeholder=\"Example: Google\" />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridAddress1\">\n                                    <Form.Label>Address</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"address\" placeholder=\"1234 Main St\" />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridAddress2\">\n                                    <Form.Label>Address 2</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"addressUnit\" placeholder=\"Apartment, studio, or floor\" />\n                                </Form.Group>\n                            </Form.Row>\n\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridCity\">\n                                    <Form.Label>City</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"addressCity\" type=\"text\" placeholder=\"Example: Los Angeles\" />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridState\">\n                                    <Form.Label>State</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"addressState\" type=\"text\" placeholder=\"Example: CA\" />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridZip\">\n                                    <Form.Label>Zip</Form.Label>\n                                    <Form.Control onChange={this.handleInputChange} name=\"addressZip\" type=\"text\" placeholder=\"Example: 90001\" />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                                <Form.Label>Comment or Description</Form.Label>\n                                <Form.Control onChange={this.handleInputChange} name=\"description\" as=\"textarea\" rows=\"3\" />\n                            </Form.Group>\n                            <Form.Group as={Col} controlId=\"formGridRole\">\n                                <Form.Label>Role</Form.Label>\n\n                                {this.state.allRoles.length ? (\n                                    <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"role\">\n                                        <option>Choose...</option>\n                                        {this.state.allRoles.map(singleRole => (\n                                            <option value={singleRole.id}>{singleRole.name}</option>\n                                        ))}\n                                    </Form.Control>\n\n                                ) : (<h3></h3>)}\n                            </Form.Group>\n                            <Button onClick={this.saveNewUser} variant=\"primary\" type=\"submit\">\n                                Submit\n                        </Button>\n                        </Form>\n                        {/* ///////////ُSHOW ALL THE USERS//////////// */}\n                    </Container>\n                    <hr />\n                    <Container fluid>\n                        <Row>\n                            <Col size=\"md-12\">\n                                <h2 className=\"text-center\">\n                                    User Lists\n                                </h2>\n                            </Col>\n                        </Row>\n                        {/* update popup */}\n                        <div id=\"popupUpdate\">\n                            <Modal.Dialog className=\"editFormCustomClass\" >\n                                <Modal.Header closeButton onClick={() => this.closeButton()}>\n                                    <Modal.Title>Update selected user</Modal.Title>\n                                </Modal.Header>\n                                <Modal.Body>\n                                    <p>Please update the information below and save.</p>\n                                    <Form.Row>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>First Name</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"fName\" type=\"text\" defaultValue={this.state.getOneUser.fName} />\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>Last Name</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"lName\" type=\"text\" placeholder={this.state.getOneUser.lName} />\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <Form.Row>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>Email</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"email\" type=\"text\" placeholder={this.state.getOneUser.email} />\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>Phone</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"phone\" type=\"text\" placeholder={this.state.getOneUser.phone} />\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <Form.Row>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>Company Name</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"companyName\" type=\"text\" placeholder={this.state.getOneUser.companyName} />\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>Address</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"phone\" type=\"text\" placeholder={this.state.getOneUser.address} />\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <Form.Row>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>Address Unit</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"addressUnit\" type=\"text\" placeholder={this.state.getOneUser.addressUnit} />\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>City</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"addressCity\" type=\"text\" placeholder={this.state.getOneUser.addressCity} />\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>State</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"addressState\" type=\"text\" placeholder={this.state.getOneUser.addressState} />\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>Zip</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"addressZip\" type=\"text\" placeholder={this.state.getOneUser.addressZip} />\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <Form.Row>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>Logo</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"logo\" type=\"text\" placeholder={this.state.getOneUser.logo} />\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label>New Password</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"password\" type=\"password\" placeholder={this.state.getOneUser.password} />\n                                        </Form.Group>\n                                        <Form.Group as={Col} controlId=\"formGridRole\">\n                                            <Form.Label>Role</Form.Label>\n\n                                            {this.state.allRoles.length ? (\n                                                <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"role\">\n                                                    <option>Choose...</option>\n                                                    {this.state.allRoles.map(singleRole => (\n                                                        <option value={singleRole.id}>{singleRole.name}</option>\n                                                    ))}\n                                                </Form.Control>\n\n                                            ) : (<h3></h3>)}\n                                        </Form.Group>\n\n                                    </Form.Row>\n                                    <Form.Row>\n                                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                                            <Form.Label>Comment or Description</Form.Label>\n                                            <Form.Control onChange={this.handleInputChange} name=\"description\" as=\"textarea\" rows=\"3\" />\n                                        </Form.Group>\n                                    </Form.Row>\n                                </Modal.Body>\n                                <Modal.Footer>\n                                    <Row>\n                                        <Col size=\"md-12\">\n                                            <Button onClick={() => this.updateOne(this.state.getOneUser.id)} variant=\"primary\">Save changes</Button>\n                                        </Col>\n                                    </Row>\n                                </Modal.Footer>\n                            </Modal.Dialog>\n                        </div>\n                        {/* SHOWING USERS */}\n                        <Table striped bordered hover>\n                            <thead>\n                                <tr>\n                                    <td>ID</td>\n                                    <td>Full Name</td>\n                                    <td>Email</td>\n                                    <td>Phone</td>\n                                    <td>Address</td>\n                                    <td>Company Name</td>\n                                    <td>Role</td>\n                                    <td>Created Date</td>\n                                    <td>Updated Date</td>\n                                    <td>Description</td>\n                                    <td>Edit</td>\n                                    <td>Delele</td>\n                                </tr>\n                            </thead>\n                            {this.state.allUsers.length ? (\n                                <tbody>\n                                    {this.state.allUsers.map(singleUser => (\n                                        <tr key={singleUser.id}>\n                                            <td name=\"roleId\">{singleUser.id}</td>\n                                            <td>{singleUser.fName} {singleUser.lName}</td>\n                                            <td>{singleUser.email} </td>\n                                            <td>{singleUser.phone} </td>\n                                            <td>{singleUser.address}, {singleUser.addressUnit}, {singleUser.addressCity}, {singleUser.addressState} {singleUser.addressZip}</td>\n                                            <td>{singleUser.companyName}</td>\n                                            <td>{singleUser.Role.name}</td>\n                                            <td><Moment format=\"MM/DD/YYYY HH:mm\" date={singleUser.createdAt} /></td>\n                                            <td><Moment format=\"MM/DD/YYYY HH:mm\" date={singleUser.updatedAt} /></td>\n                                            <td>{singleUser.description}</td>\n                                            <td className=\"text-center\"><Button onClick={() => this.getOneUser(singleUser.id)} variant=\"primary\">Edit</Button></td>\n                                            <td className=\"text-center\"><Button onClick={() => this.deleteUser(singleUser.id)} variant=\"danger\">Delete</Button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            ) : (<h3></h3>)}\n                        </Table>\n                    </Container>\n                </div>\n        )\n    }\n}\n//export default ReactDelayRender({delay: 200})(Users);\nexport default Users;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport { toast } from \"react-toastify\"\nimport 'react-toastify/dist/ReactToastify.css'\nimport { Row, Container } from \"../components/Grid\";\nimport \"./style.css\";\nimport { Modal, Button, Form, Col } from 'react-bootstrap';\n\nclass Clients extends Component {\n    state = {\n        allCustomers: [],\n        allServicesClient: [],\n        subSingleMenu: [],\n        customerId: null,\n        status: [\n            { value: \"0\", label: \"Not Activated\" },\n            { value: \"1\", label: \"Waiting on Client\" },\n            { value: \"2\", label: \"Completed\" },\n            { value: \"3\", label: \"Canceled\" }\n        ],\n        updateStatus: '',\n        updateEmployee: '',\n        getOneEmployee: [],\n        getAllEmployees: []\n\n    }\n\n    componentDidMount() {\n        this.checkSession();\n        this.getAllServiceCustomers();\n        this.getAllDeparments();\n    }\n    checkSession = () => {\n        API.getSession()\n            .then((res) => {\n                if (!(res.data.isUserLoggin)) {\n                    this.props.history.push('/', { some: 'state' })\n                } else {\n                    this.setState({\n                        userId: res.data.userId\n                    })\n                }\n            })\n            .catch(err => console.log(err))\n    }\n    ///////////////GET ALL EMPLOYEES///////////\n    getAllDeparments = () => {\n        API.getAllDeparments({})\n            .then(resGetAllDeparments => {\n                this.setState({ getAllEmployees: resGetAllDeparments.data })\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (getting all departments)\"))\n    }\n    //////////////////GET ONE EMPLOYEE//////////\n    getEmployee = (selectedId, serviceId) => {\n        let selctedEmployee = (this.state.getAllEmployees.filter(obj => obj.id === selectedId))\n        return (\n\n            selctedEmployee.map(singleSelctedEmployee => (\n                <Form.Control onChange={(evt) => this.updateAsseignedEmoloyee(evt, serviceId)} as=\"select\" name=\"updateEmployee\">\n                    <option value={singleSelctedEmployee.id}>{singleSelctedEmployee.fName} {singleSelctedEmployee.lName} - {singleSelctedEmployee.Role.name}</option>\n                    {this.getAllEmployeesoptions(selectedId)}\n                </Form.Control>\n            )\n            ))\n    }\n    getAllEmployeesoptions = (selectedId) => {\n        let selctedEmployee = (this.state.getAllEmployees.filter(obj => obj.id !== selectedId))\n        return (\n            selctedEmployee.map(singleEmployee => (\n                <option value={singleEmployee.id}>{singleEmployee.fName} {singleEmployee.lName} - {singleEmployee.Role.name}</option>\n            ))\n        )\n    }\n    updateAsseignedEmoloyee = (event, serviceId) => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        }, () => this.updateAsseignedEmoloyeeAPI(serviceId))\n    }\n    updateAsseignedEmoloyeeAPI = (serviceId) => {\n        API.updateEmployee({\n            id: serviceId,\n            employeeId: this.state.updateEmployee\n        })\n            .then(updatedResult => {\n                toast.success(\"Assinged Employeed updated successfully!\")\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (updating assigned employee)\"))\n    }\n    //////////////Get All Customers////////////////\n    getAllServiceCustomers = () => {\n        API.getAllServiceCustomers()\n            .then(resCustomer => {\n                this.setState({ allCustomers: resCustomer.data })\n            }).catch(err => {\n                toast.error(\"There is an error. Please contact administrator (Getting All Customers)\")\n            })\n    }\n    /////////////Get services for a selected client//////\n    serviceClient = () => {\n        this.setState({ allServicesClient: '' })\n        API.serviceClient({ clientId: this.state.customerId })\n            .then(resServiceClient => {\n                this.setState({ allServicesClient: resServiceClient.data });\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Getting Services for the selected service)\"));\n    }\n    ////////////////UPDATE STATUS///////////////\n    updateStatus = (event, updateIdStatus) => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        }, () => this.updateRealStatus(updateIdStatus));\n\n    }\n    updateRealStatus = (evet) => {\n        if (this.state.updateStatus === 0 || this.state.updateStatus === null) {\n            toast.error(\"Please select an update\")\n        }\n        else {\n            API.updateStatus({\n                id: evet,\n                content: this.state.updateStatus\n            }).then(result => {\n                toast.success(\"The Status updated successfully\")\n            }).catch(err => toast.error(\"There is an error. Please contact administrator (Updating status)\"));\n        }\n    }\n    //////////////////////////\n    selectFunction = (selectedId) => {\n\n        if (selectedId === 0) {\n            return (<option className=\"notActive\" value=\"0\">Not Activate</option>)\n        }\n        else if (selectedId === 1) {\n            return (<option className=\"waiting\" value=\"1\">Waiting on Client</option>)\n\n        }\n        else if (selectedId === 2) {\n            return (<option className=\"completed\" value=\"2\">Completed</option>)\n\n        }\n        else if (selectedId === 3) {\n            return (<option className=\"canceled\" value=\"3\">Canceled</option>)\n\n        }\n        else {\n            return (<option>Select...</option>)\n        }\n    }\n    /////////////MENU SERVICE SIDEBAR//////////\n    serviceMenu = () => {\n        return (\n            <ol>\n                {this.state.allServicesClient.map((singleMenu) => {\n                    if (singleMenu.Service.subId === 0) {\n                        return (\n                            <li key={singleMenu.id}>{singleMenu.Service.serviceName}\n                                <Form>\n                                    <Form.Row>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className=\"serviceTitle\">Status</Form.Label>\n                                            <Form.Control onChange={(evt) => this.updateStatus(evt, singleMenu.id)} /* placeholder={this.selectFunction(singleMenu.status)} */ as=\"select\" name=\"updateStatus\">\n                                                {this.selectFunction(singleMenu.status)}\n                                                <option className=\"notActive\" value=\"0\">Not Activate</option>\n                                                <option className=\"waiting\" value=\"1\">Waiting on Client</option>\n                                                <option className=\"completed\" value=\"2\">Completed</option>\n                                                <option className=\"canceled\" value=\"3\">Canceled</option>\n                                            </Form.Control>\n                                        </Form.Group>\n                                        <Form.Group as={Col}>\n                                            <Form.Label className=\"serviceTitle\">Assigned Employee</Form.Label>\n\n                                            {this.getEmployee(singleMenu.employeeId, singleMenu.id)}\n\n                                        </Form.Group>\n                                    </Form.Row>\n                                </Form>\n                                {this.subMenuMain(singleMenu.ServiceId)}\n                            </li>\n                        )\n                    }\n                })}\n            </ol>\n        )\n    }\n\n    subMenuMain = (subIdSearch) => {\n        let ParentsubMenu = (this.state.allServicesClient.filter(obj => obj.Service.subId === subIdSearch))\n\n        return (\n            ParentsubMenu.map(singleParentsubMenu => (\n                <ul>\n                    <li key={singleParentsubMenu.id}>{singleParentsubMenu.Service.serviceName}\n                        <Form>\n                            <Form.Row>\n                                <Form.Group as={Col}>\n                                    <Form.Control onChange={(evt) => this.updateStatus(evt, singleParentsubMenu.id)} as=\"select\" name=\"updateStatus\">\n                                        {this.selectFunction(singleParentsubMenu.status)}\n                                        <option className=\"notActive\" value=\"0\">Not Activate</option>\n                                        <option className=\"waiting\" value=\"1\">Waiting on Client</option>\n                                        <option className=\"completed\" value=\"2\">Completed</option>\n                                        <option className=\"canceled\" value=\"3\">Canceled</option>\n                                    </Form.Control>\n\n                                </Form.Group>\n                                <Form.Group as={Col}>\n                                    <Form.Label className=\"serviceTitle\">Assigned Employee</Form.Label>\n                                    {this.getEmployee(singleParentsubMenu.employeeId, singleParentsubMenu.id)}\n                                </Form.Group>\n                            </Form.Row>\n                        </Form>\n                        {this.subMenuMain(singleParentsubMenu.ServiceId)}\n                    </li>\n                </ul >\n            ))\n        )\n    }\n    ////////////////////////////\n    handleInputChange = event => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n\n    };\n    ///////////////////////////\n    render() {\n        return (\n            this.state.userId === null ? <p></p> :\n                <Container>\n                    <Row>\n                        <Col size=\"md-12\">\n                            <h2 className=\"text-center\"> Set up services to a client</h2>\n                            <Form.Row>\n                                <Form.Control onChange={this.handleInputChange} as=\"select\" name=\"customerId\">\n                                    <option>Choose...</option>\n                                    {this.state.allCustomers.map(singleCustomer => (\n                                        <option key={singleCustomer.clientId} value={singleCustomer.clientId}>{singleCustomer.User.fName} - {singleCustomer.User.lName} - {singleCustomer.User.companyName}</option>\n                                    ))}\n                                </Form.Control>\n                                <br /><br />\n                                <Button onClick={this.serviceClient} variant=\"primary\" type=\"submit\">\n                                    Search\n                            </Button>\n                            </Form.Row>\n                        </Col>\n                    </Row>\n                    {/* ///////////////////show services */}\n                    <hr />\n                    <Row>\n                        <Col size=\"md-12\">\n                            <h2 className=\"text-center\">Here are the services</h2>\n                            {this.state.allServicesClient.length > null ? this.serviceMenu() : (<p>Please choose a client to see the services</p>)}\n\n\n                        </Col>\n                    </Row>\n                </Container>\n        )\n    }\n}\n\nexport default Clients;","import React, { Component } from \"react\";\n//import API from \"../utils/API\";\nimport { toast } from \"react-toastify\"\nimport { Link } from \"react-router-dom\";\nimport 'react-toastify/dist/ReactToastify.css'\nimport { Col, Row, Container } from \"../components/Grid\";\nimport \"./style.css\"\n\nclass NoMatch extends Component {\n\n    render() {\n        return (\n            <Row>\n                <Col size=\"md-12\">\n                    <h1 className=\"text-center\">Are you lost?!</h1>    \n                </Col>\n            </Row>\n        );\n    }\n\n\n}\nexport default NoMatch;","import React, { Component } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport API from \"./utils/API\"\n/* COMPONENT */\nimport TopNav from \"./components/TopNav\";\n/* PAGES */\nimport Home from \"./pages/Home\";\nimport Role from \"./pages/Role\";\nimport Service from \"./pages/Service\";\nimport Users from \"./pages/User\";\nimport Clients from \"./pages/Clients\";\nimport NoMatch from \"./pages/NoMatch\";\n\nclass App extends Component {\n  state = {\n    userId: null\n  }\n  componentDidMount() {\n    this.checkSession()\n  }\n  checkSession = () => {\n    API.getSession()\n      .then((res) => {\n        if (res.data.isUserLoggin) {\n          this.setState({\n            userId: res.data.userId\n          })\n        }\n        else {\n          this.setState({ userId: null })\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <ToastContainer />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/roles\" component={Role} />\n            <Route exact path=\"/users\" component={Users} />\n            <Route exact path=\"/clients\" component={Clients} />\n            <Route exact path=\"/services\" component={Service} />\n            <Route component={NoMatch} />\n          </Switch>\n        </div>\n\n      </Router>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}